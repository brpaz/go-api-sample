name: CI
on:
  push:
    branches:
      - master
    paths-ignore:
      - 'docs/**'
  pull_request:
    paths-ignore:
      - 'docs/**'
env:
  TEST_IMAGE_NAME: go-api-sample:${{ github.sha }}
  GO_VERSION: 1.15
  GO111MODULE: on

jobs:
  lint:
    name: Lint Go Code
    runs-on: ubuntu-latest
    steps:
      - name: Set up Go
        uses: actions/setup-go@v1
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Check out code
        uses: actions/checkout@v2

      - name: golangci-lint
        uses: golangci/golangci-lint-action@v1
        with:
          version: v1.31

  lint-dockerfile:
    name: Lint Dockerfile
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: brpaz/hadolint-action@master

  test-unit:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: [lint, lint-dockerfile]
    steps:
      - name: Set up Go
        uses: actions/setup-go@v1
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Setup gotestsum
        uses: autero1/action-gotestsum@v0.1.0
        with:
            gotestsum_version: 0.4.1

      - name: Check out code
        uses: actions/checkout@v2

      - name: Run tests
        run: gotestsum --junitfile test-report.xml -- -v -tags=unit -cover -coverprofile=coverage.txt -covermode=atomic ./...

      - name: Upload test results artifact
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: Unit Tests Report
          path: test-report.xml

      - uses: ashley-taylor/junit-report-annotations-action@master
        if: always()
        with:
          name: Unit Tests Report
          path: test-report.xml
          access-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload coverage report to Codecov
        uses: codecov/codecov-action@v1
        if: success()
        with:
          file: ./coverage.txt

  test-integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [test-unit]
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres:12
        # Provide the password for postgres
        env:
          POSTGRES_USER: app
          POSTGRES_PASSWORD: chu0eiXa
          POSTGRES_DATABASE: app_test
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - name: Set up Go
        uses: actions/setup-go@v1
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Setup gotestsum
        uses: autero1/action-gotestsum@v0.1.0
        with:
          gotestsum_version: 0.4.1

      - name: Check out code
        uses: actions/checkout@v2

      - name: Run tests
        run: go run test/integration/db/main.go
        env:
          APP_ENV: test
          DB_HOST: localhost
          DB_PORT: 5432
          DB_USER: app
          DB_DATABASE: app
          DB_PASSWORD: chu0eiXa

  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [test-unit, test-integration]
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Build Image
        run: |
          docker build \
           --target production \
            --build-arg BUILD_DATE=`date -u +"%Y-%m-%dT%H:%M:%SZ"` \
            --build-arg VCS_REF=`git rev-parse --short HEAD` \
            --build-arg VERSION=`1.0.0` \
           -t $TEST_IMAGE_NAME .

      - name: Run Container Structure Tests
        uses: brpaz/structure-tests-action@v1.1.2
        with:
          image: ${{ env.TEST_IMAGE_NAME }}
          configFile: container-structure-test.yaml

      - name: Save image
        run:  mkdir -p /tmp/docker-image-cache && docker save -o /tmp/docker-image-cache/image.tar $TEST_IMAGE_NAME

      - name: Setup Docker Image Cache
        uses: actions/cache@v2
        with:
            path: /tmp/docker-image-cache
            key: docker-cache-${{ github.sha }}

  acceptance-tests:
    name: Acceptance Tests
    runs-on: ubuntu-latest
    needs: [build]
    env:
      APP_ENV: test
      APP_PORT: 8080
      DB_HOST: localhost
      DB_PORT: 5432
      DB_USER: app
      DB_DATABASE: app
      DB_PASSWORD: chu0eiXa
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres:12
        # Provide the password for postgres
        env:
          POSTGRES_USER: app
          POSTGRES_PASSWORD: chu0eiXa
          POSTGRES_DATABASE: app_test
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - name: Set up Go
        uses: actions/setup-go@v1
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Setup gotestsum
        uses: autero1/action-gotestsum@v0.1.0
        with:
            gotestsum_version: 0.4.1

      - name: Check out code
        uses: actions/checkout@v2

      - name: Setup Docker Image Cache
        uses: actions/cache@v2
        with:
          path: /tmp/docker-image-cache
          key: docker-cache-${{ github.sha }}

      - name: Load Image
        run:  docker load -i /tmp/docker-image-cache/image.tar

      - name: Run application
        run: |
          docker run -d -p 8080:8080 \
            -e APP_ENV=prod \
            -e APP_PORT=$(APP_PORT) \
            -e DB_HOST=$(DB_HOST) \
            -e DB_PORT=$(DB_PORT) \
            -e DB_PASSWORD=$(DB_PASSWORD) \
            -e DB_DATABASE=$(DB_DATABASE) \
            $TEST_IMAGE_NAME

      - name: Wait for application startup
        uses: ifaxity/wait-on-action
        with:
          resource: http://localhost:8080
          delay: 1000
          timeout: 15000

      - name: Run Database migrations
        run: curl -H localhost:8080

#      - name: Run tests
#        run: go test -v ./test/acceptance -tags=acceptance -count=1 -godog.format=pretty
#        env:
#          APP_URL: http://localhost:8080

#  push-to-gcr:
#    name: Push Docker image to Google Cloud Registry
#    runs-on: ubuntu-latest
#    needs: ['acceptance-tests']
#    steps:
#
#      - name: Setup Docker Image Cache
#          uses: actions/cache@v2
#          with:
#            path: /tmp/docker-image-cache
#            key: docker-cache-${{ github.sha }}
#
#      - name: Load image into docker
#        run: docker load -i image/image.tar
#
#      - name: Login in GCR
#        run:  docker login -u _json_key -p "$GCLOUD_SERVICE_KEY" https://gcr.io
#        env:
#          GCLOUD_SERVICE_KEY: ${{secrets.GCLOUD_SERVICE_KEY}}
#
#      - name: Tag and push images to Registry
#        run: |
#          docker tag $TEST_IMAGE_NAME $RELEASE_IMAGE_NAME:$GITHUB_SHA
#          docker tag $TEST_IMAGE_NAME $RELEASE_IMAGE_NAME:latest
#          docker push $RELEASE_IMAGE_NAME:$GITHUB_SHA
#          docker push $RELEASE_IMAGE_NAME:latest


#  deploy:
#    name: Deploy
#    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
#    runs-on: ubuntu-latest
#    needs: [acceptance-tests]
#    steps:
#      - run: echo "deploy"
