name: CI
on:
  push:
    branches:
      - master
  pull_request:

env:
  BRANCH: $(echo $GITHUB_REF | cut -d "/" -f 3)
  SHA_SHORT: $(echo $GITHUB_SHA | head -c7)
  APP_NAME: go-api-sample
  TEST_IMAGE_NAME: go-api-sample:${{github.sha}}
  RELEASE_IMAGE_NAME: gcr.io/${{secrets.GCLOUD_PROJECT_ID}}/go-api-sample

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - name: Set up Go
        uses: actions/setup-go@v1
        with:
          go-version: 1.12

      - name: Check out code
        uses: actions/checkout@v1

      - name: Lint Go Code
        run: |
          echo $SHA_SHORT
          export PATH=$PATH:$(go env GOPATH)/bin
          go get -u github.com/mgechev/revive
          make lint

  lint-dockerfile:
    name: Lint Dockerfile
    runs-on: ubuntu-latest
    container: pipelinecomponents/hadolint:0.4.0
    steps:
      - uses: actions/checkout@v1
      - name: Run Hadolint
        run: hadolint Dockerfile

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: [lint]
    steps:
      - name: Set up Go
        uses: actions/setup-go@v1
        with:
          go-version: 1.12

      - name: Check out code
        uses: actions/checkout@v1

      - name: Run Unit tests.
        run: make test-coverage

      - name: Upload coverage report to Codacy
        run: |
            export PATH=$PATH:$(go env GOPATH)/bin
            go get github.com/schrej/godacov
            godacov -t $CODACY_TOKEN -r ./test/cover/cover.out -c $GITHUB_SHA
        env:
          CODACY_TOKEN: ${{secrets.CODACY_TOKEN}}

  build-docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [test]
    steps:
      - name: Check out code
        uses: actions/checkout@v1

      - name: Build Docker image
        run: docker build --label "commit_sha=$GITHUB_SHA" --label "ref=$GITHUB_REF" -t $TEST_IMAGE_NAME .

      - name: Save image
        run:  docker save -o image.tar $TEST_IMAGE_NAME

      - name: Upload image artifact
        uses: actions/upload-artifact@master
        with:
          name: image
          path: image.tar

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [build-docker]
    steps:
      - name: Set up Go
        uses: actions/setup-go@v1
        with:
          go-version: 1.12

      - name: Check out code
        uses: actions/checkout@v1

      - name: Pull Image artifact
        uses: actions/download-artifact@master
        with:
          name: image

      - name: Load image into docker
        run: docker load -i image/image.tar

      - name: Run application
        run: docker run -d -e APP_ENV=prod -e APP_PORT=5000 -p 5000:5000 $TEST_IMAGE_NAME

      - name: Run Godog integration tests
        run: make test-functional
        env:
          APP_BASE_URL: http://localhost:5000

  push-to-gcr:
    name: Push Docker image to Google Cloud Registry
    runs-on: ubuntu-latest
    needs: ['integration-tests']
    steps:
      - name: Pull Image artifact
        uses: actions/download-artifact@master
        with:
          name: image

      - name: Load image into docker
        run: docker load -i image/image.tar

      - name: Login in GCR
        run:  docker login -u _json_key -p "$GCLOUD_SERVICE_KEY" https://gcr.io
        env:
          GCLOUD_SERVICE_KEY: ${{secrets.GCLOUD_SERVICE_KEY}}

      - name: Tag and push images to Registry
        run: |
          docker tag $TEST_IMAGE_NAME $RELEASE_IMAGE_NAME:$GITHUB_SHA
          docker tag $TEST_IMAGE_NAME $RELEASE_IMAGE_NAME:latest
          docker push $RELEASE_IMAGE_NAME:$GITHUB_SHA
          docker push $RELEASE_IMAGE_NAME:latest

  deploy:
    runs-on: ubuntu-latest
    needs: ['push-to-gcr']
    container: google/cloud-sdk:alpine
    env:
      GCLOUD_SERVICE_KEY: ${{secrets.GCLOUD_SERVICE_KEY}}
      GCLOUD_PROJECT_ID: ${{secrets.GCLOUD_PROJECT_ID}}
      GCLOUD_REGION: us-central1
    steps:
      - name: Authenticate on Google Cloud
        if: github.event_name == 'push' && github.ref == 'refs/heads/master'
        run: |
          echo $GCLOUD_SERVICE_KEY > ${HOME}/gcloud-service-key.json
          gcloud auth activate-service-account --key-file ${HOME}/gcloud-service-key.json

      - name: Update Gcloud components
        run: |
          gcloud components install beta --quiet
          gcloud components update --quiet

      - name: Deploy to Cloud Run
        if: github.event_name == 'push' && github.ref == 'refs/heads/master'
        run: |
          gcloud config set run/platform managed
          gcloud config set run/region $GCLOUD_REGION
          gcloud beta run deploy $APP_NAME --project $GCLOUD_PROJECT_ID --image $RELEASE_IMAGE_NAME:latest --update-env-vars APP_ENV=prod --allow-unauthenticated

      - name: Cleanup
        run: rm -f ${HOME}/gcloud-service-key.json
