name: CI
on:
  push:
    branches:
      - master
  pull_request:

env:
  TEST_IMAGE_NAME: go-api-sample:${{ github.sha }}
  GO_VERSION: 1.14
  GO111MODULE: on

jobs:
  lint:
    name: Lint Go Code
    runs-on: ubuntu-latest
    steps:
      - name: Set up Go
        uses: actions/setup-go@v1
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Check out code
        uses: actions/checkout@v2

      - name: golangci-lint
        uses: golangci/golangci-lint-action@v1
        with:
          version: v1.30

  lint-dockerfile:
    name: Lint Dockerfile
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: brpaz/hadolint-action@master

  unittests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: [lint, lint-dockerfile]
    steps:
      - name: Set up Go
        uses: actions/setup-go@v1
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Setup gotestsum
        uses: autero1/action-gotestsum@v0.1.0
        with:
            gotestsum_version: 0.4.1

      - name: Check out code
        uses: actions/checkout@v2

      - name: Run tests
        run: gotestsum --junitfile test-report.xml -- -v -short -cover -coverprofile=cover.out ./...

      - name: Upload test results artifact
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: Unit Tests Report
          path: test-report.xml

      - uses: ashley-taylor/junit-report-annotations-action@master
        if: always()
        with:
          name: Unit Test Results
          path: test-report.xml
          access-token: ${{ secrets.GITHUB_TOKEN }}

#      - name: Upload coverage report to Codacy
#        uses: brpaz/godacov-action@master
#        if: always()
#        with:
#          reportPath: 'cover.out'
#          codacyToken: ${{ secrets.CODACY_TOKEN }}
#          commitId: ${{ github.sha }}

  build:
    name: Build Image
    runs-on: ubuntu-latest
    needs: [lint, lint-dockerfile, unittests]
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Build Image
        run: |
          docker build \
           --target production \
            --build-arg BUILD_DATE=`date -u +"%Y-%m-%dT%H:%M:%SZ"` \
            --build-arg VCS_REF=`git rev-parse --short HEAD` \
            --build-arg VERSION=`1.0.0` \
           -t $TEST_IMAGE_NAME .

      - name: Run Container Tests
        uses: brpaz/structure-tests-action@v1.1.2
        with:
          image: ${{ env.TEST_IMAGE_NAME }}
          configFile: container-structure-test.yaml

      - name: Prepare Docker Cache
        uses: actions/cache@v2
        with:
            path: /tmp/docker-image-cache
            key: docker-cache

      - name: Save image
        run:  docker save -o /tmp/docker-image-cache/image.tar $TEST_IMAGE_NAME

  acceptance-tests:
    name: Acceptance Tests
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Prepare Docker Cache
        uses: actions/cache@v2
        with:
          path: /tmp/docker-image-cache
          key: docker-cache

      - name: Load Image
        run:  docker load -i /tmp/docker-image-cache/image.tar

      - run: echo "Integration tests"

  deploy:
    name: Deploy
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    needs: [acceptance-tests]
    steps:
      - run: echo "deploy"
